
build/Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c1  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000531  00000000  00000000  0000073d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c9  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000051  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(int argc, char** argv) {
    DDRC = 0x03;
  6c:	83 e0       	ldi	r24, 0x03	; 3
  6e:	84 bb       	out	0x14, r24	; 20
    PORTC |= (1<<PINC0);
  70:	a8 9a       	sbi	0x15, 0	; 21
    PORTC |= (1<<PINC2);
  72:	aa 9a       	sbi	0x15, 2	; 21

    uint8_t pressed = 0;
  74:	80 e0       	ldi	r24, 0x00	; 0
                PORTC ^= (1<<PINC0);
                PORTC ^= (1<<PINC1);
            }
        }
        else {
            pressed = 0;
  76:	90 e0       	ldi	r25, 0x00	; 0

    while(1) {
        if (bit_is_clear(PINC, 2)) {
            if(pressed == 0) {
                pressed = 1;
                PORTC ^= (1<<PINC0);
  78:	21 e0       	ldi	r18, 0x01	; 1
                PORTC ^= (1<<PINC1);
  7a:	32 e0       	ldi	r19, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <main+0x14>
            }
        }
        else {
            pressed = 0;
  7e:	89 2f       	mov	r24, r25
    PORTC |= (1<<PINC2);

    uint8_t pressed = 0;

    while(1) {
        if (bit_is_clear(PINC, 2)) {
  80:	9a 99       	sbic	0x13, 2	; 19
  82:	fd cf       	rjmp	.-6      	; 0x7e <main+0x12>
            if(pressed == 0) {
  84:	81 11       	cpse	r24, r1
  86:	fc cf       	rjmp	.-8      	; 0x80 <main+0x14>
                pressed = 1;
                PORTC ^= (1<<PINC0);
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	82 27       	eor	r24, r18
  8c:	85 bb       	out	0x15, r24	; 21
                PORTC ^= (1<<PINC1);
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	83 27       	eor	r24, r19
  92:	85 bb       	out	0x15, r24	; 21
    uint8_t pressed = 0;

    while(1) {
        if (bit_is_clear(PINC, 2)) {
            if(pressed == 0) {
                pressed = 1;
  94:	82 2f       	mov	r24, r18
  96:	f4 cf       	rjmp	.-24     	; 0x80 <main+0x14>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
